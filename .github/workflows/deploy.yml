name: Java CI with Gradle

on:
  push:
    branches: [ main, dev ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v2

      # JDK 11 설정
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
          
      - name: Set YML
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          find src
          echo $DATASOURCE_URL

      # application.yml 생성
      - name: Set YML
        working-directory: ./server
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          find src

      # application.yml 확인
      - name: Check application.yml
        working-directory: ./server
        run: |
          if [ ! -f src/main/resources/application.yml ]; then
            echo "application.yml not found!"
            exit 1
          fi

      # Gradle Wrapper 초기화
      - name: Initialize Gradle Wrapper
        working-directory: ./server
        run: |
          chmod +x gradlew
          ./gradlew wrapper

      # Gradle 빌드
      - name: Build with Gradle
        working-directory: ./server
        run: ./gradlew build

      # Docker 이미지 빌드 및 푸시
      - name: Docker build and push
        working-directory: ./server
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t board .
          docker tag board kokyungbum/board:${GITHUB_SHA::7}
          docker push kokyungbum/board:${GITHUB_SHA::7}

      # AWS 자격증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # AWS SSM 명령 실행 (서버 배포)
      - name: Deploy to Server
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          aws ssm send-command \
            --instance-ids i-051836f29d02ec06a \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \\'^server$\\'; then',
              '  sudo docker stop server',
              '  sudo docker rm server',
              'fi',
              'sudo docker pull kokyungbum/board:${GITHUB_SHA::7}',
              'sudo docker tag kokyungbum/board:${GITHUB_SHA::7} board',
              'sudo docker run -d --name server -p 8080:8080 \\
          -e DATASOURCE_URL=${{ secrets.DATASOURCE_URL }} \\
          -e DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} \\
          -e DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \\
          -e EC2_IP=${{ secrets.EC2_IP }} \\
          -e G_CLIENT_ID=${{ secrets.G_CLIENT_ID }} \\
          -e G_CLIENT_SECRET=${{ secrets.G_CLIENT_SECRET }} \\
          -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \\
          -e EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }} \\
          -e EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} \\
          -e ADMIN_MAIL=${{ secrets.ADMIN_MAIL }} \\
          -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \\
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \\
          -e AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} \\
          board'
            ]" \
            --output text

  # 클라이언트 배포
  client-deploy:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v2

      # Node 설정
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # .env 파일 생성
      - name: Create .env file
        run: |
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > ./client/.env

      # 의존성 설치
      - name: Install dependencies
        working-directory: ./client
        run: npm install

      # 빌드
      - name: Build static file
        working-directory: ./client
        run: CI=false npm run build

      # AWS 자격증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # S3 버킷에 배포
      - name: Deploy static site to S3 bucket
        run: aws s3 sync ./client/build s3://simple-board
